AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Service Broker - Amazon Aurora MySQL 5.6, 5.7 (qs-1pn9kr5a8)'

###############################################################################
# MetaData - ServiceBroker
###############################################################################
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - Aurora
    - MySQL
    - database
    Name: auroramysql
    DisplayName: Amazon Aurora MySQL
    LongDescription: Amazon Aurora is a relational database service that combines the speed and
      availability of high-end commercial databases with the simplicity and cost-effectiveness of
      open source databases. The MySQL-compatible edition of Aurora delivers up to 5X the throughput
      of standard MySQL running on the same hardware, and enables existing MySQL applications and
      tools to run without requiring modification.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/AmazonAurora_LARGE.png
    DocumentationUrl: https://aws.amazon.com/rds/aurora/
    ProviderDisplayName: Amazon Web Services
    UpdatableParameters:
      - ArchPathTag
      - EnvironmentTag
      - OwnerTag
      - CostCenterTag
      - DataClassificationTag
      - LdapUsers
      - PCIDataTag
      - PreferredMaintenanceWindowDay
      - PreferredMaintenanceWindowStartTime
      - PreferredMaintenanceWindowEndTime
      - AccessCidr
      - InboundSGName
      - AutoMinorVersionUpgrade
      - FederatedRole
      - ServiceRole
    ServicePlans:
      sign-production:
        DisplayName: Sign Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon Aurora MySQL database optimised for
          production use
        Cost: https://aws.amazon.com/rds/aurora/pricing/
        ParameterValues:
          # Should this be set here?
          NumberofAuroraReplicas: '2'
          DBName: Auto
          DBPort: 3306
          StorageEncrypted: 'true'
          BackupRetentionPeriod: 35
          MonitoringInterval: '1'
          AutoMinorVersionUpgrade: 'true'
          DBUsername: master
          DBPassword: Auto
          InboundSGName: '*-sgs-private,*-sgs-bastion'
          SubnetName: '*-support-*'
          VpcName: "*micro*"
          CostCenterTag: 102449
      sign-dev:
        DisplayName: Sign Development
        Description: Configuration designed for development and testing deployments
        LongDescription: Creates an Amazon Aurora MySQL database optimised for
          dev/test use
        Cost: https://aws.amazon.com/rds/aurora/pricing/
        ParameterValues:
          NumberofAuroraReplicas: '1'
          AvailabilityZones: Auto
          DBName: Auto
          DBPort: 3306
          StorageEncrypted: 'true'
          BackupRetentionPeriod: 1
          MonitoringInterval: '60'
          AutoMinorVersionUpgrade: 'true'
          DBUsername: master
          DBPassword: Auto
          PreferredMaintenanceWindowDay: Sat
          PreferredMaintenanceWindowStartTime: 06:00
          PreferredMaintenanceWindowEndTime: 07:00
          InboundSGName: '*-sgs-private,*-sgs-bastion'
          SubnetName: '*-support-*'
          VpcName: "*micro*"
          CostCenterTag: 102449
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon Aurora MySQL database with custom
          configuration
        Cost: https://aws.amazon.com/rds/aurora/pricing/
        ParameterValues: {}


###############################################################################
# Parameter groups
###############################################################################
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Network and Security
        Parameters:
          - PubliclyAccessible
          - VpcName
          - AccessCidr
          - InboundSGName
          - SubnetName
      -
        Label:
          default: Database User Access
        Parameters:
          - LdapUsers
          - FederatedRole
          - ServiceRole
      -
        Label:
          default: Database Instance Specification
        Parameters:
          - DBInstanceClass
      -
        Label:
          default: Database Replication
        Parameters:
          - NumberofAuroraReplicas
      -
        Label:
          default: Database Specification
        Parameters:
          - DBEngineVersion
          - DBEngineMode
          - DBName
          - DBPort
          - DBUsername
          - DBPassword
      -
        Label:
          default: Database Parameters
        Parameters:
          - AutoMinorVersionUpgrade
          - MonitoringInterval
          - BackupRetentionPeriod
          - StorageEncrypted
          - DeletionProtection
          - RDSTimeZone
          - DBClusterIdentifier
      -
        Label:
          default: Severless Specification (only applicable if Engine Version is 'MySQL 5.6-compatible' and Engine Mode is 'Serverless')
        Parameters:
          - ServerlessMinCapacityUnit
          - ServerlessMaxCapacityUnit
          - ServerlessAutoPause
          - ServerlessSecondsUntilAutoPause
      -
        Label:
          default: Maintainance Parameters
        Parameters:
          - PreferredMaintenanceWindowDay
          - PreferredMaintenanceWindowStartTime
          - PreferredMaintenanceWindowEndTime
      -
        Label:
          default: Adobe Tags
        Parameters:
          - ArchPathTag
          - EnvironmentTag
          - OwnerTag
          - CostCenterTag
          - DataClassificationTag
          - PCIDataTag

    ParameterLabels:
      DBUsername:
        default: Master Username
      DBPassword:
        default: Master User Password
      DBPort:
        default: Port Number
      DBInstanceClass:
        default: DB Instance Class
      DBEngineVersion:
       default: Engine Version
      DBEngineMode:
        default: Engine Mode
      PubliclyAccessible:
        default: Publicly Accessible
      AccessCidr:
        default: Access CIDR
      DBClusterIdentifier:
        default: Name of DB Cluster
      NumberofAuroraReplicas:
        default: Number of Aurora Replicas
      DeletionProtection:
        default: Deletion Protection
      RDSTimeZone:
        default: DB Server Timezone
      PreferredMaintenanceWindowDay:
        default: Preferred Maintenance Window Day
      PreferredMaintenanceWindowStartTime:
        default: Preferred Maintenance Window Start Time
      PreferredMaintenanceWindowEndTime:
        default: Preferred Maintenance Window End Time
      AutoMinorVersionUpgrade:
        default: Auto Minor Version Upgrade
      MonitoringInterval:
        default: Monitoring Interval
      BackupRetentionPeriod:
        default: Backup Retention Period
      StorageEncrypted:
        default: Storage Encrypted
      ServerlessMinCapacityUnit:
        default: Minimum Aurora capacity unit
      ServerlessMaxCapacityUnit:
        default: Maximum Aurora capacity unit
      ServerlessAutoPause:
        default: Pause compute capacity
      ServerlessSecondsUntilAutoPause:
        default: Pause after time of inactivity
      InboundSGName:
        default: Accessing Security Group
      VpcName:
        default: Vpc Name
      SubnetName:
        default: Subnet Name
      ArchPathTag:
        default: Cloud Resource Tagging Standard ArchPath
      EnvironmentTag:
        default: Cloud Resource Tagging Standard EnvironmentTag
      OwnerTag:
        default: Cloud Resource Tagging Standard Owner
      CostCenterTag:
        default: Cloud Resource Tagging Standard Cost Center
      DataClassificationTag:
        default: Cloud Resource Tagging Standard Data Classification Tag
      PCIDataTag:
        default: Cloud Resource Tagging Standard PCI Data Tag
      LdapUsers:
        default: LDAP usernames with write access
      FederatedRole:
        default: IAM role for federated access.
      ServiceRole:
        default: IAM role of the accessing service.

###############################################################################
# Parameters
###############################################################################
Parameters:

  AccessCidr:
    Description: CIDR block to allow to connect to database (Optional)
    Type: String
    Default: None

  ArchPathTag:
    Description: Cloud Resource Tagging Standard ArchPath
    Type: String

  VpcName:
    Description: The name of the VPC to launch the Memcache cluster into
    Type: String

  SubnetName:
    Description: String to match against existing subnets to place the cache
      cluster in (glob wildcards allowed).
    Type: String

  InboundSGName:
    Description: Existing Security Group name to allow access to database. Glob
      wildcards allowed. (Optional)
    Type: String
    Default: None

  DBClusterIdentifier:
    Description: Name of the DB Cluster
    Type: String

  AutoMinorVersionUpgrade:
    Description: Indicates that minor engine upgrades are applied automatically to
      the DB instance during the maintenance window.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

  BackupRetentionPeriod:
    Description: The number of days during which automatic DB snapshots are retained. Min is 1 and Max value is 35.
    Type: Number
    Default: 35
    MinValue: 1
    MaxValue: 35

  CostCenterTag:
    Description: Cloud Resource Tagging Standard Cost Center
    Type: String

  DataClassificationTag:
    Description: Cloud Resource Tagging Standard Data Classification Tag
    Type: String

  DBName:
    Description: The name of the database to create when the DB instance is created, will be autogenerated if set to "Auto".
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Default: Auto
    AllowedPattern: ^(?!^mysql$)(?!^performance_schema$)(?!^information_schema$)[a-zA-Z0-9]*$
    ConstraintDescription: must contain from 1 to 64 alphanumeric characters, and not be reserved.

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 3306
    ConstraintDescription: 'Must be in the range [1150-65535]'
    MinValue: 1150
    MaxValue: 65535

  DBUsername:
    Description: Database master username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, and _ accepted. max length 16 characters. Note 'admin' is reserved and cannot be used here.
    Default: 'master'

  DBPassword:
    Description: Master user database Password, if left at default a 32 character password will be generated
    Type: String
    Default: Auto
    NoEcho: 'True'

  DBEngineVersion:
    Description: Select Database Engine Version.
    Type: String
    Default: 'Aurora-MySQL5.6.10a'
    AllowedValues:
    - 'Aurora-MySQL5.6.10a'
    - 'Aurora-MySQL5.6-1.19.0'
    - 'Aurora-MySQL5.7.12'
    - 'Aurora-MySQL5.7-2.03.2'
    - 'Aurora-MySQL5.7-2.03.3'
    - 'Aurora-MySQL5.7-2.03.4'
    - 'Aurora-MySQL5.7-2.03.4.2'
    - 'Aurora-MySQL5.7-2.04.0'
    - 'Aurora-MySQL5.7-2.04.1'
    - 'Aurora-MySQL5.7-2.04.2'
    - 'Aurora-MySQL5.7-2.04.3'
    - 'Aurora-MySQL5.7-2.04.4'
    - 'Aurora-MySQL5.7-2.04.5'
    - 'Aurora-MySQL5.7-2.04.6'
    - 'Aurora-MySQL5.7-2.04.7'
    - 'Aurora-MySQL5.7-2.04.8'
    - 'Aurora-MySQL5.7-2.05.0'
    - 'Aurora-MySQL5.7-2.06.0'
    - 'Aurora-MySQL5.7-2.07.0'
    - 'Aurora-MySQL5.7-2.07.1'

  DBInstanceClass:
    Default: db.r4.large
    Description: Database Instance Class (Aurora MySQL supports the db.t3 instance classes for Aurora MySQL 1.15 and higher, and all Aurora MySQL 2.* versions). Not applicable if Engine Mode is Serverless.
    Type: String
    AllowedValues:
    - db.r5.12xlarge
    - db.r5.4xlarge
    - db.r5.2xlarge
    - db.r5.xlarge
    - db.r5.large
    - db.r4.16xlarge
    - db.r4.8xlarge
    - db.r4.4xlarge
    - db.r4.2xlarge
    - db.r4.xlarge
    - db.r4.large
    - db.r3.8xlarge
    - db.r3.4xlarge
    - db.r3.2xlarge
    - db.r3.xlarge
    - db.r3.large
    - db.t3.2xlarge
    - db.t3.xlarge
    - db.t3.large
    - db.t3.medium
    - db.t3.small
    - db.t3.micro
    - db.t2.medium
    - db.t2.small

  DeletionProtection:
    Description: Indicates if the DB cluster should have deletion protection enabled.
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'

  DBEngineMode:
    Description: The DB engine mode of the DB cluster, either provisioned, serverless (currently available for Aurora MySQL 5.6)
    Type: String
    Default: 'provisioned'
    AllowedValues:
    - 'provisioned'
    - 'serverless'

  EnvironmentTag:
    Description: Cloud Resource Tagging Standard EnvironmentTag
    Type: String

  LdapUsers:
    Description: Comma delimited LDAP usernames with write access
    Type: String
    Default: ''

  FederatedRole:
    Description: IAM role for federated access to AWS account. The managed policy allowing DB access will be added to this role.
    Type: String
    Default: ''

  ServiceRole:
    Description: IAM role for the service to access the database. The managed policy allowing DB access will be added to this role.
    Type: String
    Default: ''

  NumberofAuroraReplicas:
    Description: Number of Aurora Replicas to deploy in addition to the Primary. Not provisioned if engine mode is Serverless. If selecting 2 replicas, Number Of Availability Zones must be more than 2
    Type: String
    Default: '0'
    AllowedValues:
    - '0'
    - '1'
    - '2'

  MonitoringInterval:
    Description: The interval, in seconds, between points when Enhanced Monitoring
      metrics are collected for the DB instance.
    Type: String
    Default: '1'
    AllowedValues:
    - '0'
    - '1'
    - '5'
    - '10'
    - '15'
    - '30'
    - '60'

  OwnerTag:
    Description: Cloud Resource Tagging Standard Owner
    Type: String

  PCIDataTag:
    Description: Cloud Resource Tagging Standard PCI Data Tag
    Type: String

  PreferredMaintenanceWindowDay:
    Description: The day of the week which RDS maintenance will be performed
    Type: String
    Default: Sun
    AllowedValues:
    - Mon
    - Tue
    - Wed
    - Thu
    - Fri
    - Sat
    - Sun

  PreferredMaintenanceWindowEndTime:
    Description: The weekly end time in UTC for the RDS maintenance window, must be
      more than PreferredMaintenanceWindowStartTime.
    Type: String
    Default: 06:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'

  PreferredMaintenanceWindowStartTime:
    Description: The weekly start time in UTC for the RDS maintenance window, must
      be less than PreferredMaintenanceWindowEndTime.
    Type: String
    Default: 04:00
    AllowedValues:
    - 00:00
    - 01:00
    - 02:00
    - 03:00
    - 04:00
    - 05:00
    - 06:00
    - 07:00
    - 08:00
    - 09:00
    - '10:00'
    - '11:00'
    - '12:00'
    - '13:00'
    - '14:00'
    - '15:00'
    - '16:00'
    - '17:00'
    - '18:00'
    - '19:00'
    - '20:00'
    - '21:00'
    - '22:00'

  PubliclyAccessible:
    Description: Indicates whether the DB instance is an Internet-facing instance.
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'

  RDSTimeZone:
    Description: The default timezone for the database engine to use.
    Type: String
    Default: UTC
    AllowedValues:
    - Africa/Cairo
    - Africa/Casablanca
    - Africa/Harare
    - Africa/Monrovia
    - Africa/Nairobi
    - Africa/Tripoli
    - Africa/Windhoek
    - America/Araguaina
    - America/Asuncion
    - America/Bogota
    - America/Caracas
    - America/Chihuahua
    - America/Cuiaba
    - America/Denver
    - America/Fortaleza
    - America/Guatemala
    - America/Halifax
    - America/Manaus
    - America/Matamoros
    - America/Monterrey
    - America/Montevideo
    - America/Phoenix
    - America/Santiago
    - America/Tijuana
    - Asia/Amman
    - Asia/Ashgabat
    - Asia/Baghdad
    - Asia/Baku
    - Asia/Bangkok
    - Asia/Beirut
    - Asia/Calcutta
    - Asia/Damascus
    - Asia/Dhaka
    - Asia/Irkutsk
    - Asia/Jerusalem
    - Asia/Kabul
    - Asia/Karachi
    - Asia/Kathmandu
    - Asia/Krasnoyarsk
    - Asia/Magadan
    - Asia/Muscat
    - Asia/Novosibirsk
    - Asia/Riyadh
    - Asia/Seoul
    - Asia/Shanghai
    - Asia/Singapore
    - Asia/Taipei
    - Asia/Tehran
    - Asia/Tokyo
    - Asia/Ulaanbaatar
    - Asia/Vladivostok
    - Asia/Yakutsk
    - Asia/Yerevan
    - Atlantic/Azores
    - Australia/Adelaide
    - Australia/Brisbane
    - Australia/Darwin
    - Australia/Hobart
    - Australia/Perth
    - Australia/Sydney
    - Canada/Newfoundland
    - Canada/Saskatchewan
    - Brazil/East
    - Europe/Amsterdam
    - Europe/Athens
    - Europe/Dublin
    - Europe/Helsinki
    - Europe/Istanbul
    - Europe/Kaliningrad
    - Europe/Moscow
    - Europe/Paris
    - Europe/Prague
    - Europe/Sarajevo
    - Pacific/Auckland
    - Pacific/Fiji
    - Pacific/Guam
    - Pacific/Honolulu
    - Pacific/Samoa
    - US/Alaska
    - US/Central
    - US/Eastern
    - US/East-Indiana
    - US/Pacific
    - UTC

  StorageEncrypted:
    Description: Indicates whether the DB instance is encrypted.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

  ServerlessMinCapacityUnit:
    Description: The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be less than or equal to the maximum capacity.
    Type: String
    Default: '2'
    AllowedValues:
    - '2'
    - '4'
    - '8'
    - '16'
    - '32'
    - '64'
    - '128'
    - '256'

  ServerlessMaxCapacityUnit:
    Description: The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity.
    Type: String
    Default: '64'
    AllowedValues:
    - '2'
    - '4'
    - '8'
    - '16'
    - '32'
    - '64'
    - '128'
    - '256'

  ServerlessAutoPause:
    Description: Specifies whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when its idle (it has no connections).
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'

  ServerlessSecondsUntilAutoPause:
    Description: The time, in seconds, before an Aurora DB cluster in serverless mode is auto paused. Min = 300, Max = 86400 (24hrs)
    Type: Number
    Default: 300
    MaxValue: 86400
    MinValue: 300

###############################################################################
# Mappings
###############################################################################

Mappings:

  DBFamilyMap:
    "Aurora-MySQL5.6.10a":
      "family" : "aurora5.6"
    "Aurora-MySQL5.6-1.19.0":
      "family" : "aurora5.6"
    "Aurora-MySQL5.7.12":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.03.2":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.03.3":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.03.4":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.03.4.2":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.0":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.1":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.2":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.3":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.4":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.5":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.6":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.7":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.04.8":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.05.0":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.06.0":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.07.0":
      "family" : "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.07.1":
      "family" : "aurora-mysql5.7"

  DBEngineVersionMap:
    "Aurora-MySQL5.6.10a":
      "engineversion" : "5.6.10a"
    "Aurora-MySQL5.6-1.19.0":
      "engineversion" : "5.6.mysql_aurora.1.19.0"
    "Aurora-MySQL5.7.12":
      "engineversion" : "5.7.12"
    "Aurora-MySQL5.7-2.03.2":
      "engineversion" : "5.7.mysql_aurora.2.03.2"
    "Aurora-MySQL5.7-2.03.3":
      "engineversion" : "5.7.mysql_aurora.2.03.3"
    "Aurora-MySQL5.7-2.03.4":
      "engineversion" : "5.7.mysql_aurora.2.03.4"
    "Aurora-MySQL5.7-2.03.4.2":
      "engineversion" : "5.7.mysql_aurora.2.03.4.2"
    "Aurora-MySQL5.7-2.04.0":
      "engineversion" : "5.7.mysql_aurora.2.04.0"
    "Aurora-MySQL5.7-2.04.1":
      "engineversion" : "5.7.mysql_aurora.2.04.1"
    "Aurora-MySQL5.7-2.04.2":
      "engineversion" : "5.7.mysql_aurora.2.04.2"
    "Aurora-MySQL5.7-2.04.3":
      "engineversion" : "5.7.mysql_aurora.2.04.3"
    "Aurora-MySQL5.7-2.04.4":
      "engineversion" : "5.7.mysql_aurora.2.04.4"
    "Aurora-MySQL5.7-2.04.5":
      "engineversion" : "5.7.mysql_aurora.2.04.5"
    "Aurora-MySQL5.7-2.04.6":
      "engineversion" : "5.7.mysql_aurora.2.04.6"
    "Aurora-MySQL5.7-2.04.7":
      "engineversion" : "5.7.mysql_aurora.2.04.7"
    "Aurora-MySQL5.7-2.04.8":
      "engineversion" : "5.7.mysql_aurora.2.04.8"
    "Aurora-MySQL5.7-2.05.0":
      "engineversion" : "5.7.mysql_aurora.2.05.0"
    "Aurora-MySQL5.7-2.06.0":
      "engineversion" : "5.7.mysql_aurora.2.06.0"
    "Aurora-MySQL5.7-2.07.0":
      "engineversion" : "5.7.mysql_aurora.2.07.0"
    "Aurora-MySQL5.7-2.07.1":
      "engineversion" : "5.7.mysql_aurora.2.07.1"

  DBEngineNameMap:
    "Aurora-MySQL5.6.10a":
      "enginename" : "aurora"
    "Aurora-MySQL5.6-1.19.0":
      "enginename" : "aurora"
    "Aurora-MySQL5.7.12":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.03.2":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.03.3":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.03.4":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.03.4.2":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.0":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.1":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.2":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.3":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.4":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.5":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.6":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.7":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.04.8":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.05.0":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.06.0":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.07.0":
      "enginename" : "aurora-mysql"
    "Aurora-MySQL5.7-2.07.1":
      "enginename" : "aurora-mysql"


###############################################################################
# Conditions
###############################################################################
Conditions:
  EncryptionEnabled:
    !Equals
    - !Ref StorageEncrypted
    - 'true'

  ServerlessEnabled:
    !Equals
    - !Ref DBEngineMode
    - 'serverless'

  ServerlessDisabled:
    !Equals
    - !Ref DBEngineMode
    - 'provisioned'

  1replica:
    !Or
    - !Equals
      - !Ref NumberofAuroraReplicas
      - '1'
    - !Equals
      - !Ref NumberofAuroraReplicas
      - '2'

  2replica:
    !Equals
    - !Ref NumberofAuroraReplicas
    - '2'

  CanCreate1Replica:
    !And
    - !Condition ServerlessDisabled
    - !Condition 1replica

  CanCreate2Replica:
   !And
   - !Condition ServerlessDisabled
   - !Condition 2replica

  AutoPassword:
    !Equals
    - !Ref DBPassword
    - Auto

  AutoDBName:
    !Equals
    - !Ref DBName
    - Auto

  IamEnabled:
    !Not
     - !Equals
       - !Ref LdapUsers
       - ''

  SGIngress:
    !Not
     - !Equals
       - !Ref InboundSGName
       - None

  CidrIngress:
    !Not
     - !Equals
       - !Ref AccessCidr
       - None

###############################################################################
# Resources
###############################################################################

Resources:

  MonitoringIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DBUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IamEnabled
    Properties:
      ManagedPolicyName: !Join [ "-", [ Admin_User, !Ref ArchPathTag, !Ref AuroraDBPrimaryInstance ] ]
      Description: Managed Policy for access to service broker created Aurora MySQL database
      Path: /
      Roles:
        - !Ref FederatedRole
      PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - rds-db:connect
            Resource:
              - !GetAtt AWSSBInjectedAddDbUsers.AdminUser
            Condition:
              StringLike:
                aws:userid: !GetAtt AWSSBInjectedAddDbUsers.IamUsers

  DBApplicationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: IamEnabled
    Properties:
      ManagedPolicyName: !Join [ "-", [ App_User, !Ref ArchPathTag, !Ref AuroraDBPrimaryInstance ] ]
      Description: Managed Policy for access to service broker created Aurora MySQL database
      Path: /
      Roles:
        - !Ref ServiceRole
      PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - rds-db:connect
            Resource:
              - !GetAtt AWSSBInjectedAddDbUsers.ApplicationUser

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub Database ${DBName}
      SubnetIds: !GetAtt AWSSBInjectedGetSubnetIds.SubnetIDs

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Allow Client connections to Database ${DBName}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Lambda SG
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !GetAtt AWSSBInjectedGetSubnetIds.VpcId

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for agreementretention service Lambda function
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress: []
      VpcId: !GetAtt AWSSBInjectedGetSubnetIds.VpcId

  ClusterSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ClusterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !GetAtt ClusterSecurityGroup.GroupId
      Description: Self Reference

  ClusterSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SGIngress
    Properties:
      GroupId: !GetAtt ClusterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !GetAtt AWSSBInjectedGetSG.SecurityGroupId0
      Description: Named SG

  ClusterSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SGIngress
    Properties:
      GroupId: !GetAtt ClusterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      SourceSecurityGroupId: !GetAtt AWSSBInjectedGetSG.SecurityGroupId1
      Description: Named SG

  ClusterCidrIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CidrIngress
    Properties:
      GroupId: !GetAtt ClusterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      CidrIp: !Ref AccessCidr
      Description: VPC CIDR

  ClusterSecurityGroupLambdaEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId: !GetAtt ClusterSecurityGroup.GroupId
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      IpProtocol: tcp
      GroupId: !Ref LambdaSecurityGroup
      Description: Lambda Outbound

  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Join [ "- ", [ "Aurora PG Cluster Parameter Group for Cloudformation Stack ", !Ref DBName ] ]
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"]
      Parameters:
        time_zone: !Ref RDSTimeZone

  AuroraKMSCMK:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:CreateGrant
          - kms:ListGrants
          - kms:DescribeKey
          Resource: '*'
          Condition:
            StringEquals:
              kms:CallerAccount: !Ref AWS::AccountId
              kms:ViaService: !Sub 'rds.${AWS::Region}.amazonaws.com'

  AuroraKMSCMKAlias:
    Type: AWS::KMS::Alias
    DeletionPolicy: Retain
    DependsOn: AuroraDBCluster
    Properties:
      AliasName: !Sub 'alias/${AuroraDBCluster}'
      TargetKeyId: !Ref AuroraKMSCMK

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBClusterIdentifier: !Ref DBClusterIdentifier
      Engine:  !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, enginename]
      EngineVersion: !FindInMap [DBEngineVersionMap, !Ref DBEngineVersion, engineversion]
      EngineMode: !Ref DBEngineMode
      EnableIAMDatabaseAuthentication: !If [IamEnabled, 'true', 'false']
      ScalingConfiguration:  !If
        - ServerlessEnabled
        - AutoPause: !Ref ServerlessAutoPause
          MaxCapacity: !Ref ServerlessMaxCapacityUnit
          MinCapacity: !Ref ServerlessMinCapacityUnit
          SecondsUntilAutoPause: !Ref ServerlessSecondsUntilAutoPause
        - !Ref AWS::NoValue
      DatabaseName:
        !If
        - AutoDBName
        - !GetAtt AWSSBInjectedGenerateDBName.DBName
        - !Ref DBName
      Port: !Ref DBPort
      MasterUsername: !Ref DBUsername
      MasterUserPassword:
        !If
        - AutoPassword
        - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
        - !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
      - !Ref ClusterSecurityGroup
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      StorageEncrypted: !Ref StorageEncrypted
      KmsKeyId:  !If
        - EncryptionEnabled
        - !GetAtt AuroraKMSCMK.Arn
        - !Ref AWS::NoValue
      DeletionProtection: !Ref DeletionProtection
      PreferredMaintenanceWindow: !Sub ${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowStartTime}-${PreferredMaintenanceWindowDay}:${PreferredMaintenanceWindowEndTime}
      Tags:
        - Key: Adobe.ArchPath
          Value: !Ref ArchPathTag
        - Key: Adobe.Environment
          Value: !Ref EnvironmentTag
        - Key: Adobe.Owner
          Value: !Ref OwnerTag
        - Key: Adobe.CostCenter
          Value: !Ref CostCenterTag
        - Key: Adobe.DataClassification
          Value: !Ref DataClassificationTag
        - Key: Adobe.PCIData
          Value: !Ref PCIDataTag

  AuroraDBPrimaryInstance:
    Condition: ServerlessDisabled
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster
      Engine:  !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, enginename]
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible
      AvailabilityZone:
        !Select
        - 0
        - !GetAtt AWSSBInjectedGetSubnetIds.AvailabilityZones
      Tags:
        - Key: Adobe.ArchPath
          Value: !Ref ArchPathTag
        - Key: Adobe.Environment
          Value: !Ref EnvironmentTag
        - Key: Adobe.Owner
          Value: !Ref OwnerTag
        - Key: Adobe.CostCenter
          Value: !Ref CostCenterTag
        - Key: Adobe.DataClassification
          Value: !Ref DataClassificationTag
        - Key: Adobe.PCIData
          Value: !Ref PCIDataTag

  AuroraDBReplicaOneInstance:
    Condition: CanCreate1Replica
    Type: AWS::RDS::DBInstance
    DependsOn:
      - AuroraDBPrimaryInstance
    Properties:
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster
      Engine:  !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, enginename]
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible
      AvailabilityZone:
        !Select
        - 1
        - !GetAtt AWSSBInjectedGetSubnetIds.AvailabilityZones
      Tags:
        - Key: Adobe.ArchPath
          Value: !Ref ArchPathTag
        - Key: Adobe.Environment
          Value: !Ref EnvironmentTag
        - Key: Adobe.Owner
          Value: !Ref OwnerTag
        - Key: Adobe.CostCenter
          Value: !Ref CostCenterTag
        - Key: Adobe.DataClassification
          Value: !Ref DataClassificationTag
        - Key: Adobe.PCIData
          Value: !Ref PCIDataTag

  AuroraDBReplicaTwoInstance:
    Condition: CanCreate2Replica
    Type: AWS::RDS::DBInstance
    DependsOn:
      - AuroraDBPrimaryInstance
    Properties:
      DBInstanceClass:
        Ref: DBInstanceClass
      DBClusterIdentifier: !Ref AuroraDBCluster
      Engine:  !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, enginename]
      MonitoringInterval: !Ref MonitoringInterval
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      AutoMinorVersionUpgrade: !Ref AutoMinorVersionUpgrade
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: !Ref PubliclyAccessible
      AvailabilityZone:
        !Select
        - 2
        - !GetAtt AWSSBInjectedGetSubnetIds.AvailabilityZones
      Tags:
        - Key: Adobe.ArchPath
          Value: !Ref ArchPathTag
        - Key: Adobe.Environment
          Value: !Ref EnvironmentTag
        - Key: Adobe.Owner
          Value: !Ref OwnerTag
        - Key: Adobe.CostCenter
          Value: !Ref CostCenterTag
        - Key: Adobe.DataClassification
          Value: !Ref DataClassificationTag
        - Key: Adobe.PCIData
          Value: !Ref PCIDataTag

###############################################################################
# Injected Lambdas
###############################################################################

  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: micro-aws-servicebroker-templates
      Prefix: ""
      Objects:
      - functions/generate_password/lambda_function.zip
      - functions/generate_dbname/lambda_function.zip
      - functions/get_subnet_ids/lambda_function.zip
      - functions/get_sg/lambda_function.zip
      - functions/add_db_users/lambda_function.zip
      - layers/requests/lambda_layer.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::micro-aws-servicebroker-templates/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGetSubnetIdsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_subnet_ids
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSubnetIdsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSubnetIdsRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_subnet_ids/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSubnetIds:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSubnetIdsLambda.Arn
      VpcName: !Ref VpcName
      SubnetName: !Ref SubnetName
  AWSSBInjectedGetSGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_sg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSecurityGroups
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetSGLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetSGRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_sg/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGetSG:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetSGLambda.Arn
      SGName: !Ref InboundSGName
  AWSSBInjectedAddDbUsersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_add_db_user
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedAddDbUsersLambda:
    Condition: IamEnabled
    DependsOn:
      - AWSSBInjectedCopyZips
      - AuroraDBPrimaryInstance
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedAddDbUsersRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/add_db_users/lambda_function.zip
      Runtime: python3.7
      Timeout: '130'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !GetAtt AWSSBInjectedGetSubnetIds.SubnetIDs
  AWSSBInjectedAddDbUsers:
    Condition: IamEnabled
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedAddDbUsersLambda.Arn
      DBPassword:
        !If
        - AutoPassword
        - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
        - !Ref DBPassword
      DBUsername: !Ref DBUsername
      DBName:
        !If
        - AutoDBName
        - !GetAtt AWSSBInjectedGenerateDBName.DBName
        - !Ref DBName
      ClusterEndpoint: !GetAtt AuroraDBCluster.Endpoint.Address
      Account: !Ref AWS::AccountId
      LdapUsers: !Ref LdapUsers
  AWSSBInjectedGeneratePasswordRole:
    Condition: IamEnabled
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGeneratePasswordLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGeneratePasswordRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_password/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGeneratePasswordLambda.Arn
      Length: 32
  AWSSBInjectedGenerateDBNameRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGenerateDBNameLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGenerateDBNameRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_dbname/lambda_function.zip
      Runtime: python3.7
      Timeout: '60'
      Layers:
        - !Ref AWSSBRequestsLambdaLayer
  AWSSBInjectedGenerateDBName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGenerateDBNameLambda.Arn
      Length: 32
  AWSSBRequestsLambdaLayer:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: layers/requests/lambda_layer.zip
      Description: Contains requests and cfnresponse.send()
      LayerName: requests
      LicenseInfo: Apache License v2.0, AWS Customer Agreement

###############################################################################
# Outputs
###############################################################################
Outputs:
  ClusterEndpoint:
    Description: Aurora Cluster/Writer Endpoint
    Value: !GetAtt AuroraDBCluster.Endpoint.Address
  ReaderEndpoint:
    Condition: ServerlessDisabled
    Description: Aurora Reader Endpoint
    Value: !GetAtt AuroraDBCluster.ReadEndpoint.Address
  Port:
    Description: Aurora Endpoint Port
    Value: !GetAtt AuroraDBCluster.Endpoint.Port
  DBUsername:
    Description: Database master username
    Value: !Ref DBUsername
  DBName:
    Value:
      !If
      - AutoDBName
      - !GetAtt AWSSBInjectedGenerateDBName.DBName
      - !Ref DBName
  AdminIamUser:
    Value:
      !If
      - IamEnabled
      - !GetAtt AWSSBInjectedAddDbUsers.AdminUser
      - ''
  AppIamUser:
    Value:
      !If
      - IamEnabled
      - !GetAtt AWSSBInjectedAddDbUsers.ApplicationUser
      - ''
